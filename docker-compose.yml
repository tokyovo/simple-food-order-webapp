version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: foodorder-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://foodorder:password123@postgres:5432/foodorder
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev-secret-key-change-in-production
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - foodorder-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: foodorder-postgres
    environment:
      - POSTGRES_DB=foodorder
      - POSTGRES_USER=foodorder
      - POSTGRES_PASSWORD=password123
    # ports:
    #   - "5432:5432"  # Only expose if needed for external access
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U foodorder -d foodorder"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodorder-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: foodorder-redis
    # ports:
    #   - "6379:6379"  # Only expose if needed for external access
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - foodorder-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: foodorder-nginx
    ports:
      - "80:80"
      # - "443:443"  # HTTPS not needed for development
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - foodorder-network
    restart: unless-stopped

  # Adminer (Database Management Tool) - Optional for development
  adminer:
    image: adminer:latest
    container_name: foodorder-adminer
    ports:
      - "8081:8080"  # Changed to avoid port conflict
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - foodorder-network
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  foodorder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16